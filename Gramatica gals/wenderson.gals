#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = false
ScannerTable = Full
Input = Stream
Parser = LL
#RegularDefinitions
DIGITO:[0-9]
LETRA:[A-Za-z]
whitespace : [\s\t\n]
comment    : [\0-\41\43-\255]

#Tokens
: {whitespace}*
: / / [^\n]*

identificador: {LETRA} ({LETRA} | {DIGITO})*

numero: {DIGITO}+


inicioprograma	= identificador : "iniciop"
fimprograma	= identificador : "fimp"
var      	= identificador : "var"

laco     	= identificador : "iniciolaco"
fimlaco  	= identificador : "fimlaco"

se  		= identificador :"se"
senao 		= identificador :"senao"
fimse 		= identificador :"fimse"
escreva 		= identificador :"escreva"
leia     	= identificador :"leia"
entao    	= identificador :"entao"

"="
"+"
"-"
"*"
"/"
"<="
">="
">"
"<"
"=="
"("
")"
";"


#NonTerminals
<programa>
<declaracao_recursiva>
<declaracao>
<escreva>
<leia>
<condicional>
<se>
<senao>
<laco_repeticao>
<while>
<declaracao_var>
<atribuicao>
<expressao_basica>
<operador_basico>
<id_ou_numero>
<qualquer_expressao>
<expressao_logica>
<operador_logico>
<termo>
<expressao_basica2>
<operador_soma>
<fator>
<termo2>
<operador_mult>
#Grammar
<programa>::= inicioprograma <declaracao_recursiva> fimprograma | î
;
<declaracao_recursiva>::= <declaracao> <declaracao_recursiva> |  î
;

<declaracao>::= <escreva>
	      | <leia>
	      | <condicional>
	      | <laco_repeticao>
	      | <declaracao_var>
	      | <atribuicao>
;
<escreva>::= escreva "(" <qualquer_expressao> ")" ";"
;
<leia>   ::= leia  "(" identificador ")" ";"
;
<condicional>::= <se> <senao> fimse
;
<se>::= se "(" <expressao_logica> ")" entao <declaracao_recursiva>
;
<senao> ::= senao <declaracao_recursiva>  |  î
;
<laco_repeticao>::= <while> fimlaco 
;
<while>::= laco "(" <expressao_logica> ")" <declaracao_recursiva>
;
<declaracao_var>::= var identificador ";"
;
<atribuicao>::= identificador "=" <expressao_basica> ";"
;

<id_ou_numero>::= identificador | numero
;
<qualquer_expressao>::= <expressao_basica>
;
<operador_logico>::= "<=" | ">=" | ">" | "<" | "=="
;
<expressao_logica>::= <id_ou_numero> <operador_logico> <id_ou_numero> 
;

<expressao_basica>::= <termo> <expressao_basica2>
;
<expressao_basica2>::= <operador_soma> <termo> <expressao_basica2> | î
;
<termo>::= <fator> <termo2>
;
<termo2>::= <operador_mult> <fator> <termo2> | î
;

<fator>::= identificador | numero | "(" <expressao_basica> ")"
;

<operador_soma>::= "+" | "-"
;
<operador_mult>::= "*" | "/"
;






