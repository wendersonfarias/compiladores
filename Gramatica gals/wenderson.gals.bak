#Options
GenerateScanner = true
GenerateParser = true
Language = Java
ScannerName = Lexico
ParserName = Sintatico
SemanticName = Semantico
ScannerCaseSensitive = false
ScannerTable = Compact
Input = Stream
Parser = LL
#RegularDefinitions
espacobranco : [\s\t\n]
comentarios    : [\0-\41\43-\255]
caractere  : [a-zA-Z]
inteiro    : [0-9]

#Tokens
                       	: {espacobranco}*
                        	: / / [^\n]*
identificador             	: {caractere}({caractere} | {inteiro} )*
numero         		: ({inteiro})+


inicioprograma	= identificador : "iniciop"


fimprograma	= identificador : "fimp"
fimse     	= identificador : "fimse"
fimlaco  	= identificador : "fimlaco"

se       	= identificador : "se"
senao     	= identificador : "senao"


laco     	= identificador : "laco"
leia    		= identificador : "leia"

escreva    	= identificador : "escreva"

var      	= identificador : "var"

"("
")"
";"
"="
"=="
"+"
"-"
"*"
"/"
"<"
"<="
">="
">"
#NonTerminals
<programa>
<declaracao_recursiva>
<declaracao>
<escreva>
<leia>
<condicional>
<se>
<senao>
<loop>
<while>
<declaracao_var>
<atribuicao>
<expressao_basica>
<operador_basico>
<qualquer_expressao>
<expressao_logica>
<id_or_number>
<operador_logico>
#Grammar
<programa>::= inicioprograma <declaracao_recursiva> fimprograma 
|	î
;
<declaracao_recursiva>::= <declaracao> <declaracao_recursiva>
|	î
;
<declaracao>::= 	<escreva> 
|		<leia>
|		<condicional>
|		<loop>
|		<declaracao_var>
|		<atribuicao>
;
<escreva>::= escreva "(" <qualquer_expressao> ")" ";"
;
<leia>                ::= leia "(" identificador ")" ";"
;
<condicional>         ::= <se> <senao> fimse
;
<se>                  ::= se "(" <expressao_logica> ")" <declaracao_recursiva>
;
<senao>                ::= senao <declaracao_recursiva>
|		î
;
<loop>                ::= <while> fimlaco
;
<while>               ::= laco "(" <expressao_logica> ")"  <declaracao_recursiva>
;
<declaracao_var>::=      var identificador ";"
;
<atribuicao>::=           identificador  "=" <expressao_basica> ";"
;
<expressao_basica>::=     identificador <operador_basico>
|                          numero <operador_basico>
|                          "+"    <expressao_basica>
|                          "-"    <expressao_basica>
|                          "("    <expressao_basica> ")" <operador_basico>
;
<operador_basico>::=      "+"<expressao_basica>
|                         "-" <expressao_basica>
|                         "*" <expressao_basica>
|                         "/" <expressao_basica>
|		î
;

<id_or_number>           ::= identificador | numero
;
<qualquer_expressao>::=  <expressao_basica>                       
;
<operador_logico>::=   "<" | ">" | ">=" | "<="
;
<expressao_logica>   ::=  <id_or_number> <operador_logico> <id_or_number>
;
